/*
███████╗███████╗ █████╗ ██████╗  ██████╗██╗  ██╗     █████╗ ██╗      ██████╗  ██████╗ ██████╗ ██╗████████╗██╗  ██╗███╗   ███╗███████╗
██╔════╝██╔════╝██╔══██╗██╔══██╗██╔════╝██║  ██║    ██╔══██╗██║     ██╔════╝ ██╔═══██╗██╔══██╗██║╚══██╔══╝██║  ██║████╗ ████║██╔════╝
███████╗█████╗  ███████║██████╔╝██║     ███████║    ███████║██║     ██║  ███╗██║   ██║██████╔╝██║   ██║   ███████║██╔████╔██║███████╗
╚════██║██╔══╝  ██╔══██║██╔══██╗██║     ██╔══██║    ██╔══██║██║     ██║   ██║██║   ██║██╔══██╗██║   ██║   ██╔══██║██║╚██╔╝██║╚════██║
███████║███████╗██║  ██║██║  ██║╚██████╗██║  ██║    ██║  ██║███████╗╚██████╔╝╚██████╔╝██║  ██║██║   ██║   ██║  ██║██║ ╚═╝ ██║███████║
╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝    ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝
*/

/**
 * Binary Search
 * time complexity: O(lg n)
 * @param a   {Array} sorted array
 * @param key {number} value you're searching for in the array
 * @returns   {number} returns index of search key or -1 if value not found
 */
function binarySearch(a, key) {
  let low = 0;
  let high = a.length - 1;
  while (low <= high) {
    let mid = Math.floor(low + (high - low) / 2);
    if      (key < a[mid]) { high = mid - 1; }
    else if (key > a[mid]) { low = mid + 1; } 
    else { return mid; }
  }
  
  return -1;
}
